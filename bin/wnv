#!/usr/bin/env sh
# shellcheck disable=SC1090,SC1091

# Name:        winryv
# Version:     0.0.6
# Description: Small wrappers and utils for v projects

set -eu

[ -n "${TRACE+defined}" ] && set -x

a="/$0"; a=${a%/*}; a=${a#/}; a=${a:-.}
script_base_dir=$(cd "$a/../" || return; pwd)
bin_dir="${script_base_dir}/bin"
_self="${script_base_dir}/winryv"
readonly script_base_dir _self
unset a

script_name='winryv'
script_version='0.0.1'
status_usage=64

print_usage()
{
	printf "Small helpers and utils for v projects

Usage:
  %s [options [--]] <command> [options...] [<arguments...>]

Available options:
  -c, --color       Enable color output
  -c, --no-color    Disable color output
  -h                Show script help.
  -V                Show version.
  -v, --verbose     Enable color output

Available commands:
  build                 Build the project
  fmt, format           Format project source
  fmt:test              Format and test the project
  profile               Profile the project
  profile:compare       Profile the project
  run                   Run project source
  test [<test-file>]    Execute project tests. If test-file is given, all tests will run
" "$script_name"
}

main()
{
	while getopts cnhv option; do
		case $option in
			c) SCRIPT_COLOR=1 ; setup_colors ;;
			n) NO_COLOR=0 ; setup_colors ;;
			h) print_usage; exit 0 ;;
			v) log "$script_name $script_version"; exit 0 ;;
			*) die "$status_usage" "$1" 'Unknown option' ;;
		esac
	done
	shift $((OPTIND-1))

	while [ "${1+defined}" ]; do
	case "$1" in
		fmt:test) $_self fmt && $_self test; exit "$?" ;;
		run:debug) shift $(($# ? 1 : 0)); v -keepc -cg -showcc run "${script_base_dir}/." "$@"; exit "$?" ;;
		run) shift $(($# ? 1 : 0)); v -cg run "${script_base_dir}/." "$@"; exit "$?" ;;
		build)
			shift $(($# ? 1 : 0))
			[ ! -d "${bin_dir}" ] && mkdir "${bin_dir}"
			log 'Building ' "$(basename "${script_base_dir}")"
			v -prod -autofree -prealloc "${script_base_dir}/" -o "${script_base_dir}/bin/vdotenv"
			exit "$?"
		;;
		fmt|format)
			shift $(($# ? 1 : 0))
			log 'Formatting ' "$(basename "${script_base_dir}")"
			v fmt -w "${script_base_dir}"/*.v
			exit "$?"
		;;
		profile)
			shift $(($# ? 1 : 0))
			vsrc="${script_base_dir}/vdotenv.v"
			binary="${script_base_dir}/vdotenv"
			total="$(find "${script_base_dir}/_profile" -type f -name '*.txt' | wc -l)"
			total=$((total - 1))
			profile_txt="${script_base_dir}/_profile/profile${total}.txt"

			log 'Profiling ' "$(basename "${script_base_dir}")"
			v -profile "${profile_txt}" "${vsrc}" || die 64 'Profile build failed'
			"${binary}" && sort -n -k3 "${profile_txt}" | tail
			exit "$?"
		;;
		profile:compare)
			shift $(($# ? 1 : 0))

			find "${script_base_dir}/_profile" -type f -name '*.txt' | while read -r profile; do
				basename "${profile}"
				echo '--------------'
				echo ''
				sort -n -k3 "${profile}" | tail
			done

			exit "$?"
		;;
		test)
			shift $(($# ? 1 : 0))
			test_file=''
			with_stats=' -stats'

			if [ -n "${1:-}" ] && [ "${1}" = '--no-stats' ]; then
				with_stats=''
				shift $(($# ? 1 : 0))
			fi

			if [ -n "${1:-}" ]; then
				test_file="${script_base_dir}/${1}"
				shift $(($# ? 1 : 0))
			fi

			if [ -n "${1:-}" ]; then
				filter_test="${1}"
			fi

			case $test_file in
			    *_test.v) ;;
				'') test_file="${script_base_dir}/." ;;
			    *) test_file="${test_file}_test.v" ;;
			esac

			if [ ! -r "$test_file" ]; then
				die 64 "Cannot read test file: ${test_file}"
			fi

			# shellcheck disable=SC2086
			v -cg$with_stats test "${test_file}"${filter_test+ -run-only "*${filter_test}*"}
			exit "$?"
		;;
		--no-color) NO_COLOR=0 ; setup_colors ;;
		--color) SCRIPT_COLOR=1 ; setup_colors ;;
		--verbose) verbose_wanted=1 ;;
		--*|-*) die "$status_usage" "$1" 'Unknown option' ;;
		*) die "$status_usage" "$1" 'Unknown command' ;;
	esac
		shift $(($# ? 1 : 0));
	done

	print_usage
	exit 64
}

log() {
	set +eu
		printf '%b%s %b%s%b %s\n' \
				"$lcol" "${3:-->}" "${lclr}${2:+$lcol2}" "$1" "$lclr" "$2" >&2
		set -eu
}

info() {
	[ "${verbose_wanted:-}" != 1 ] && return 0
		log "$1" "$2" "${3:-INFO}"
}

warn() {
	set +eu; log "$1" "$2" "${3:-WARNING}"; set -eu
}

die() {
	set +eu; log "$2" "$3" "${4:-ERROR}"; set -eu
	exit "$1"
}

setup_colors() {
	if [ "${SCRIPT_COLOR-}" = 1 ] || [ -t 2 ] && [ -z "${NO_COLOR-}" ] && [ "${TERM-}" != "dumb" ]; then
		lcol='\033[1;33m' lcol2='\033[1;34m' lclr='\033[m'
	else
		lcol='' lcol2='' lclr=''
	fi
}

main "$@"
